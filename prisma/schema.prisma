generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  password    String
  phoneNumber String
  isAdmin     Boolean    @default(false)
  address     Address?
  cart        Cart[]
  wishlist    Wishlist[]
  orders      Order[]
}

model Wishlist {
  id        Int  @id @default(autoincrement())
  productId Int
  userId    Int
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id      Int    @id @default(autoincrement())
  address String
  city    String
  state   String
  zip     Int
  userId  Int     @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  rating      Int
  productId   Int
  userId      Int
  userName    String
  timestamp   DateTime  @default(now())
  product     Product @relation(fields: [productId], references: [id])
}

model Variant {
  id        Int      @id @default(autoincrement())
  color     String
  images    String[]
  productId Int
  material  String
  product   Product  @relation(fields: [productId], references: [id])
}

model Product {
  id            Int       @id @default(autoincrement())
  name          String
  description   String
  price         Float
  stock         Int
  gender        String  @default("men")
  salePrice     Float
  new           Boolean
  originalPrice Float
  quantity      Int
  sale          Boolean
  sizes         String[]
  sold          Int
  type          String
  luxury        Boolean   @default(false)
  category      String[]
  reviews       Review[]
  variants      Variant[]
}

model Cart {
  id        Int     @id @default(autoincrement())
  productId Int
  userId    Int
  quantity  Int     @default(1)
  size      String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Order {
  id          Int       @id @default(autoincrement())
  userId      Int
  address     String
  state       String    @default("pending") 
  paid        Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount Float
  createdAt   DateTime  @default(now())
  orderItems  OrderItem[]
  merchantOrderId String @unique
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  price     Float    
  size      String?
}

model TempOrders {
  id        Int      @id @default(autoincrement())
  userId    Int
  address   String
  state     String    @default("pending") 
  paid      Boolean   @default(false)
  totalAmount Float
  createdAt DateTime  @default(now())
  tempOrderItems  TempOrdersItem[]
  merchantOrderId String @unique
}
model TempOrdersItem {
  id        Int      @id @default(autoincrement())
  tempOrdersId Int
  productId Int
  tempOrders     TempOrders    @relation(fields: [tempOrdersId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  price     Float    
  size      String?
}
 



